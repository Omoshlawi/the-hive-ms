generator client {
  provider = "prisma-client-js"
  output   = "../dist/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AttributeType {
  id             String  @id @default(uuid()) @db.Uuid
  name           String  @unique
  organizationId String? @db.Uuid // Nullable if global
  icon           Json? // {name, family}

  // organization   Organization? @relation(fields: [organizationId], references: [id])
  voided             Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  assignedProperties PropertyAttribute[]

  @@unique([name, organizationId]) // Prevent duplicate names within an organization
}

model Amenity {
  id             String  @id @default(uuid()) @db.Uuid
  name           String
  organizationId String? @db.Uuid
  icon           Json // {name, family}

  // organization   Organization? @relation(fields: [organizationId], references: [id])
  voided             Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  assignedProperties PropertyAmenity[]

  @@unique([name, organizationId])
}

model Category {
  id             String             @id @default(uuid()) @db.Uuid
  name           String
  organizationId String?            @db.Uuid
  icon           Json // {name, family}
  // organization   Organization? @relation(fields: [organizationId], references: [id])
  voided         Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  properties     PropertyCategory[]

  @@unique([name, organizationId])
}

model Property {
  id           String @id @default(uuid()) @db.Uuid
  name         String
  thumbnail    Json //{id, path}
  organization Json

  // Relationships
  relationshipsAsA Relationship[]      @relation("PropertyARelationship")
  relationshipsAsB Relationship[]      @relation("PropertyBRelationship")
  attributes       PropertyAttribute[]
  location         PropertyLocation?
  media            PropertyMedia[]
  amenities        PropertyAmenity[]
  categories       PropertyCategory[]

  voided    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RelationshipType {
  id          String   @id @default(uuid()) @db.Uuid
  description String?  @db.Text
  aIsToB      String // e.g., "is parent of", "contains", "has parking"
  bIsToA      String // e.g., "is child of", "is part of", "belongs to parking"
  voided      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Relationship {
  id          String    @id @default(uuid()) @db.Uuid
  propertyAId String    @db.Uuid
  propertyBId String    @db.Uuid
  startDate   DateTime
  endDate     DateTime?

  propertyA Property @relation("PropertyARelationship", fields: [propertyAId], references: [id], onDelete: Cascade)
  propertyB Property @relation("PropertyBRelationship", fields: [propertyBId], references: [id], onDelete: Cascade)

  voided    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyLocation {
  id             String   @id @default(uuid()) @db.Uuid
  propertyId     String   @unique @db.Uuid
  addressLine1   String
  addressLine2   String?
  city           String
  state          String
  country        String
  postalCode     String
  latitude       Decimal?
  longitude      Decimal?
  geospatialData Json? // Additional location data

  property Property @relation(fields: [propertyId], references: [id])

  voided    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyMedia {
  id          String            @id @default(uuid()) @db.Uuid
  propertyId  String            @db.Uuid
  type        PropertyMediaType
  url         String
  title       String?
  description String?           @db.Text
  metadata    Json? // Additional media metadata like meme type, size,e.t.c
  order       Int               @default(0)

  property Property @relation(fields: [propertyId], references: [id])

  voided    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PropertyMediaType {
  Image
  Video
  Document
  Tour_3D
}

model PropertyAttribute {
  id          String @id @default(uuid()) @db.Uuid
  propertyId  String @db.Uuid
  attributeId String @db.Uuid
  value       String // Custom value for this property

  property  Property      @relation(fields: [propertyId], references: [id])
  attribute AttributeType @relation(fields: [attributeId], references: [id])

  voided    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyAmenity {
  id         String @id @default(uuid()) @db.Uuid
  propertyId String @db.Uuid
  amenityId  String @db.Uuid

  property Property @relation(fields: [propertyId], references: [id])
  amenity  Amenity  @relation(fields: [amenityId], references: [id])

  voided    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyCategory {
  id         String @id @default(uuid()) @db.Uuid
  propertyId String @db.Uuid
  categoryId String @db.Uuid

  property Property @relation(fields: [propertyId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  voided    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
