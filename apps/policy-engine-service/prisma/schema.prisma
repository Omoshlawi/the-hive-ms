// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../dist/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique
  description String? @db.Text

  createdBy String

  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  voided      Boolean                  @default(false)
  memberShips OrganizationMemberShip[]
  roles       Role[]
  privileges  Privilege[]
}

model Role {
  id                   String                        @id @default(uuid()) @db.Uuid
  name                 String                        @unique
  description          String?                       @db.Text
  createdBy            String
  organizationId       String?                       @db.Uuid
  organization         Organization?                 @relation(fields: [organizationId], onDelete: Cascade, references: [id])
  createdAt            DateTime                      @default(now())
  updatedAt            DateTime                      @updatedAt
  voided               Boolean                       @default(false)
  privilegeAssignments RolePrivilege[]
  memberships          OrganizationMemberShipRoles[]

  @@unique([name, organizationId])
}

model Resource {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique
  description String? @db.Text

  dataPoints String[]    @default([]) //Table fields
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  voided     Boolean     @default(false)
  privileges Privilege[]

  @@unique([name, dataPoints])
}

model Privilege {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique
  description String? @db.Text

  createdBy      String
  organizationId String?       @db.Uuid
  organization   Organization? @relation(fields: [organizationId], onDelete: Cascade, references: [id])

  resourceId                 String   @db.Uuid
  resource                   Resource @relation(fields: [resourceId], onDelete: Cascade, references: [id])
  permitedResourceDataPoints String[] @default([])

  operations Operation[] @default([])

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  voided          Boolean         @default(false)
  roleAssignments RolePrivilege[]

  @@unique([organizationId, name])
  @@unique([organizationId, resourceId, permitedResourceDataPoints])
}

model OrganizationMemberShip {
  id              String                        @id @default(uuid()) @db.Uuid
  organizationId  String                        @db.Uuid
  memberUserId    String                        @db.Uuid
  memberUser      Json? //minimal person object for member
  isAdmin         Boolean                       @default(false) // has full access
  organization    Organization                  @relation(fields: [organizationId], onDelete: Cascade, references: [id])
  createdAt       DateTime                      @default(now())
  updatedAt       DateTime                      @updatedAt
  voided          Boolean                       @default(false)
  membershipRoles OrganizationMemberShipRoles[]

  @@unique([memberUserId, organizationId])
}

model OrganizationMemberShipRoles {
  id           String                 @id @default(uuid()) @db.Uuid
  membershipId String                 @db.Uuid
  roleId       String                 @db.Uuid
  membership   OrganizationMemberShip @relation(fields: [membershipId], onDelete: Cascade, references: [id])
  role         Role                   @relation(fields: [roleId], onDelete: Cascade, references: [id])
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  voided       Boolean                @default(false)

  @@unique([membershipId, roleId])
}

model RolePrivilege {
  id          String @id @default(uuid()) @db.Uuid
  privilegeId String @db.Uuid
  roleId      String @db.Uuid

  role      Role      @relation(fields: [roleId], onDelete: Cascade, references: [id])
  privilege Privilege @relation(fields: [privilegeId], onDelete: Cascade, references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  voided    Boolean   @default(false)

  @@unique([privilegeId, roleId])
}

enum Operation {
  Create
  Read
  Update
  Delete
}
